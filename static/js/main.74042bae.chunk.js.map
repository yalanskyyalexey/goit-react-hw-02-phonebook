{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","currentTarget","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","validateForm","alert","className","styles","form","this","label","text","type","onChange","form__btn","Component","ContactList","contacts","onRemove","length","s","list","map","id","items","delete_btn","onClick","Filter","filter","filter__input","App","initialContacts","formSubmitHandler","newName","console","log","find","toLowerCase","contact","uuid","prev","deleteContact","uniqId","prevState","changeFilter","visibleContacts","normalizedFilter","includes","filteredContacts","appWrapper","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.74042bae.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport styles from './ContactForm.module.css';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    this.props.onSubmit(name, number, this.reset);\r\n    const isValidForm = this.validateForm();\r\n\r\n    if (!isValidForm) return;\r\n\r\n    this.reset();\r\n  };\r\n\r\n  validateForm = () => {\r\n    const { name, number } = this.state;\r\n    if (!name || !number) {\r\n      alert('Some field is empty');\r\n      return;\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <h1>Phonebook</h1>\r\n        <label className={styles.label}>\r\n          <span className={styles.text}>Name</span>\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n\r\n        <label className={styles.label}>\r\n          <span className={styles.text}>Number</span>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n          />\r\n        </label>\r\n        <button className={styles.form__btn} type=\"submit\">\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n  if (contacts.length === 0) {\r\n    alert('The list is empty');\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <ul className={s.list}>\r\n      {contacts.map(({ name, number, id }) => (\r\n        <li className={s.items} key={id}>\r\n          <p className={s.text}>\r\n            {name}: {number}\r\n          </p>\r\n          <button\r\n            className={s.delete_btn}\r\n            type=\"button\"\r\n            onClick={() => onRemove(id)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ),\r\n  onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  return (\r\n    <label className={s.filter}>\r\n      <span>Find contacts by name</span>\r\n      <input\r\n        className={s.filter__input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import React, { Component } from 'react';\n// import './App.css';\n\nimport s from './App.css';\nimport ContactForm from './components/ContactForm';\nimport ContactList from './components/ContactList';\nimport { v4 as uuid } from 'uuid';\nimport Filter from './components/Filter';\nimport initialContacts from './data/contacts.json';\n\nclass App extends Component {\n  state = {\n    contacts: initialContacts,\n    filter: '',\n  };\n\n  formSubmitHandler = (newName, number, reset) => {\n    console.log(reset);\n\n    if (\n      this.state.contacts.find(\n        ({ name }) => name.toLowerCase() === newName.toLowerCase(),\n      )\n    ) {\n      alert('Contact is already exist');\n      reset();\n      return;\n    }\n\n    const contact = {\n      id: uuid(),\n      name: newName,\n      number,\n    };\n    console.log(contact);\n    this.setState(prev => {\n      reset();\n      return {\n        contacts: [...prev.contacts, contact],\n      };\n    });\n  };\n\n  deleteContact = uniqId => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== uniqId),\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  visibleContacts = () => {\n    const { contacts, filter } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  render() {\n    const { filter } = this.state;\n    const filteredContacts = this.visibleContacts();\n    return (\n      <div className={s.appWrapper}>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={filteredContacts}\n          onRemove={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}